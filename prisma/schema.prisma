generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Empresas {
  id                Int        @id @default(autoincrement())
  cnpj              String
  inscricao_estadual String
  razao_social      String
  nome_fantasia     String
  endereco          String?    @db.Text
  numero_endereco   String?
  bairro            String?
  complemento       String?    @db.Text
  cidade            String
  cep               String?
  telefone          String
  email             String
  ativo             Boolean    @default(true)
  dt_criacao        DateTime   @default(now())
  dt_atualizacao    DateTime   @updatedAt
  Unidades          Unidades[]

  @@map("empresas")
}

model Unidades {
  id               Int        @id @default(autoincrement())
  nome             String?
  cep              String?    @db.VarChar(120) // Garantir que o tamanho do varchar Ã© suficiente para o valor fornecido
  endereco         String?
  bairro           String?
  cidade           String
  estado           String     @db.VarChar(2)
  ativo            Boolean    @default(true)
  id_empresa       Int
  empresa          Empresas   @relation(fields: [id_empresa], references: [id])
  dt_criacao       DateTime   @default(now())
  dt_atualizacao   DateTime   @updatedAt
  Usuarios         Usuarios[]

  @@map("unidades")
}


model Usuarios {
  id               Int        @id @default(autoincrement())
  nome             String
  cpf              String?
  email            String     @unique
  telefone         String?
  foto             String?
  token_acesso     String?
  senha            String?
  ativo            Boolean    @default(true)
  iat              String?
  exp              String?
  id_perfil        Int
  id_unidade       Int
  unidade          Unidades   @relation(fields: [id_unidade], references: [id])
  dt_criacao       DateTime   @default(now())
  dt_atualizacao   DateTime   @updatedAt
  deletado         Boolean    @default(false)
  perfil           Perfis     @relation(fields: [id_perfil], references: [id])
  usersRoles       UsersRoles[] 

  @@map("usuarios")
}

model Perfis {
  id             Int        @id @default(autoincrement())
  nome           String
  descricao      String?
  dt_criacao     DateTime   @default(now())
  dt_atualizacao DateTime   @updatedAt
  Usuarios       Usuarios[]

  @@map("perfis")
}

model Role {
  id               String     @id
  descricao        String?
  UsersRoles       UsersRoles[]
  PermissionsRoles PermissionsRoles[]
}

model UsersRoles {
  user             Usuarios          @relation(fields: [userId], references: [id])
  userId           Int
  role             Role              @relation(fields: [roleId], references: [id])
  roleId           String

  @@id([userId, roleId])
}

model Permission {
  id          String            @id @default(uuid())
  name        String            @unique
  description String
  createdAt   DateTime          @default(now()) @map("created_at")
  roles       PermissionsRoles[]

  @@map("permissions")
}

model PermissionsRoles {
  role         Role        @relation(fields: [roleId], references: [id])
  roleId       String
  permission   Permission  @relation(fields: [permissionId], references: [id])
  permissionId String

  @@id([roleId, permissionId])
  @@map("permissions_roles")
}


